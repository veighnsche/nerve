# nrv CLI Publish Readiness Checklist

## Specs & Planning
- [ ] Update `.specs/03_nrv_cli.md` to cover every subcommand, flags, examples, and generated artifacts.
- [ ] Cross-link CLI spec updates in `.specs/00_nerve.md` and any impacted domain specs (e.g., `02_nrv_object.md`).
- [ ] Ensure ADR-010 (and others) are amended if new behaviours or files are introduced.
- [ ] Capture outstanding design questions in `todo.md` and archive once addressed (`sceipts/archive_todo.sh`).

## Capability Snapshot Implementation
- [ ] Implement `sync-capabilities` to call the orchestrator `capabilities` endpoint with explicit transport configuration.
- [ ] Generate `.nrv/generated/capabilities.ts`, `.nrv/generated/types.d.ts`, and `apps/nrv/src/nrv_capabilities.rs` (or chosen module path) with deterministic ordering and formatting.
- [ ] Guarantee idempotent regeneration (same input â†’ identical file contents, no spurious diffs).
- [ ] Handle partial failures via temporary files + transactional move to suppress corrupt snapshots.
- [ ] Surface clear error messages and exit codes for orchestrator/network failures.

## Testing & Quality Gates
- [ ] Expand `apps/nrv/tests/features/nrv_cli.feature` (or equivalent) with acceptance scenarios covering all commands and error paths.
- [ ] Add step definitions that assert generated files, content hashes, and idempotency.
- [ ] Introduce focused unit tests for helper modules (file IO, serializers, CLI arg parsing).
- [ ] Provide integration tests that mock the orchestrator client and validate end-to-end behaviour.
- [ ] Ensure `cargo test --workspace` and `cargo check --workspace` pass without warnings on CI.
- [ ] Document how to run the BDD feature suite locally (env flags, prerequisites).

## Documentation & Developer Experience
- [ ] Update `README.md` with CLI usage, install instructions, and capability sync examples.
- [ ] Add a dedicated section in `.specs/10_nrv_llm.md` (or new spec) explaining runtime vs generated capability snapshots.
- [ ] Provide troubleshooting guidance for common sync failures (auth, network, stale orchestrator).
- [ ] Include sample generated files in docs (trimmed) to illustrate schema expectations.
- [ ] Note cross-platform considerations (Unix vs Windows paths, UTF-8 handling).

## Packaging & Distribution
- [ ] Finalise `apps/nrv/Cargo.toml` metadata (description, homepage, repository, license, categories, keywords).
- [ ] Decide on default feature flags and optional dependencies for release build.
- [ ] Add binaries/entry points for `cargo install nrv` and verify execution via installed binary.
- [ ] Author release notes template for each version bump.
- [ ] Prepare an npm wrapper (if required) that ships the compiled binary or invokes the Rust build, with aligned package metadata and README.
- [ ] Verify license notices and third-party attributions meet crates.io / npm requirements.

## Build & Release Pipeline
- [ ] Configure CI to cross-compile release binaries for target platforms (Linux x64, macOS arm64/x64, Windows x64).
- [ ] Publish release artifacts (tar/zip) with checksums and signature instructions.
- [ ] Automate version tagging and changelog generation (Conventional Commits enforced on main).
- [ ] Smoke-test released artifacts (install, run `--version`, run `sync-capabilities` against staging orchestrator).
- [ ] Establish rollback procedure and document how to yank crates.io releases if necessary.

## Post-Release Stewardship
- [ ] Set up issue templates for CLI bugs/feature requests.
- [ ] Monitor orchestrator schema changes and schedule sync work when endpoints evolve.
- [ ] Track telemetry or adoption metrics (if policy allows) and document data handling.
- [ ] Plan for follow-up features (e.g., `nrv init`, logging flags) and capture them in specs before implementation.

## Operational Hardening
- [ ] Provide structured logging output with verbosity flags and consistent stderr messaging.
- [ ] Document configuration precedence (CLI flags, env vars, config files) and implement override logic.
- [ ] Audit exit codes across success and failure paths to ensure they match specs and docs.

## Security & Compliance
- [ ] Document authentication and credential handling for orchestrator access (env vars, keyring, config files).
- [ ] Ensure generated capability snapshots omit secrets and scrub sensitive metadata before writing.
- [ ] Enforce TLS certificate validation and document proxy configuration options.
- [ ] Review dependency tree for known vulnerabilities prior to each release.

## Support & Observability
- [ ] Publish issue triage workflow, support channels, and expected response windows.
- [ ] Clarify telemetry posture (none collected, or explicit opt-in/out) and document any data handling.
- [ ] Provide log-level controls and attach human-readable error codes to support diagnostics.

## Performance & Resilience
- [ ] Exercise capability sync against large payloads and slow/unstable networks to confirm behaviour.
- [ ] Define retry/backoff strategy (or document intentional absence) for orchestrator interactions.
- [ ] Handle timeouts and user cancellations gracefully with actionable feedback.

## Compatibility & Platform Coverage
- [ ] Test the CLI on all supported OS/architecture targets and the minimum Rust toolchain version.
- [ ] Verify Windows-specific behaviours (path separators, permissions, CRLF endings) for generated files.
- [ ] Confirm behaviour on read-only or partial-write filesystems and document required workspace layout.

